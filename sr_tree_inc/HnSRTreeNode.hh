/*
 * HnSRTreeNode.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:33
 */

#ifndef _HnSRTreeNode_hh
#define _HnSRTreeNode_hh

#include "HnPointer.hh"

#include "HnString.hh"
#include "HnRect.hh"
#include "HnSRTreeCore.hh"
#include "HnSRTreeBlock.hh"
#include <unistd.h>

class HnSRTreeNode;
class HnSRTreeNodeObj;
class HnSRTreeNodeArray;
class HnSRTreeNodeArrayObj;

HnSRTreeNodeArray
new_HnSRTreeNodeArray(void);
HnSRTreeNodeArray
new_HnSRTreeNodeArray(const HnSRTreeNodeArray &ptr);

 HnSRTreeNode
new_HnSRTreeNode(int dimension, int blockSize, off_t offset);
 HnSRTreeNode
new_HnSRTreeNode(int dimension, const HnSRTreeBlock &block);
/*
 * HnSRTreeNode
 */

class HnSRTreeNode: public HnPointer {
private:
    friend class HnSRTreeNodeObj;
	HnSRTreeNode(const HnSRTreeNodeObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeNodeObj *getObject(void) const {
		return (HnSRTreeNodeObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeNode null;
	HnSRTreeNode(void) {}
public:
    friend HnSRTreeNode
	new_HnSRTreeNode(int dimension, int blockSize, off_t offset);
    friend HnSRTreeNode
	new_HnSRTreeNode(int dimension, const HnSRTreeBlock &block);

	void append(const HnSRTreeCore &core,
		    const HnRect &rect, off_t offset);
	void remove(int index);
	void setElementAt(const HnSRTreeCore &core, const HnRect &rect,
			  off_t offset, int index);
	void setCoreAt(const HnSRTreeCore &core, int index);
	void setBoundingRectAt(const HnRect &rect, int index);

	int getDimension(void) const;
	int getBlockSize(void) const;
	off_t getOffset(void) const;
	int getCount(void) const;
	size_t getSize(void) const;
	HnBool isFull(void) const;

	HnSRTreeCore getCore(void) const;
	HnRect getBoundingRect(void) const;

	HnSRTreeCore getCoreAt(int index) const;
	HnRect getRectAt(int index) const;
	off_t getOffsetAt(int index) const;

	HnSRTreeBlock toBlock(void) const;

	HnString toString(void) const;

	static int getMaxCount(int dimension, int blockSize);
};

/*
 * HnSRTreeNodeArray
 */

class HnSRTreeNodeArray: public HnPointer {
private:
    friend class HnSRTreeNodeArrayObj;
	HnSRTreeNodeArray(const HnSRTreeNodeArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeNodeArrayObj *getObject(void) const {
		return (HnSRTreeNodeArrayObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeNodeArray null;
	HnSRTreeNodeArray(void) {}
public:
	/* constructors */
    friend HnSRTreeNodeArray
	new_HnSRTreeNodeArray(void);
    friend HnSRTreeNodeArray
	new_HnSRTreeNodeArray(const HnSRTreeNodeArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnSRTreeNode &ptr);
	void append(const HnSRTreeNodeArray &ptr);
	void insert(const HnSRTreeNode &ptr, int index);
	HnSRTreeNode remove(int index);
	void set(const HnSRTreeNode &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnSRTreeNode &get(int i) const;
	HnSRTreeNode &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnSRTreeNode &ptr) {
		append(ptr);
	}
	HnSRTreeNode pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnSRTreeNodeArray &ptr) const;
	int indexOf(const HnSRTreeNode &ptr, int fromIndex) const;
	int indexOf(const HnSRTreeNode &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnSRTreeNode_hh */
