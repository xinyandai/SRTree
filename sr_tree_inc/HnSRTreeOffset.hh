/*
 * HnSRTreeOffset.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:33
 */

#ifndef _HnSRTreeOffset_hh
#define _HnSRTreeOffset_hh

#include "HnPointer.hh"

#include <sys/types.h>
#include "HnString.hh"

class HnSRTreeOffset;
class HnSRTreeOffsetObj;
class HnSRTreeOffsetArray;
class HnSRTreeOffsetArrayObj;

HnSRTreeOffset
new_HnSRTreeOffset(off_t value);
/* constructors */
 HnSRTreeOffsetArray
new_HnSRTreeOffsetArray(void);
 HnSRTreeOffsetArray
new_HnSRTreeOffsetArray(const HnSRTreeOffsetArray &ptr);

/*
 * HnSRTreeOffset
 */

class HnSRTreeOffset: public HnPointer {
private:
    friend class HnSRTreeOffsetObj;
	HnSRTreeOffset(const HnSRTreeOffsetObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeOffsetObj *getObject(void) const {
		return (HnSRTreeOffsetObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeOffset null;
	HnSRTreeOffset(void) {}
public:
	HnSRTreeOffset(off_t value) {
		assign(new_HnSRTreeOffset(value));
	}

    friend HnSRTreeOffset
	new_HnSRTreeOffset(off_t value);
	off_t getValue(void) const;
	HnBool equals(const HnSRTreeOffset &ptr) const;
	HnString toString(void) const;
	operator off_t(void) const;
};

/*
 * HnSRTreeOffsetArray
 */

class HnSRTreeOffsetArray: public HnPointer {
private:
    friend class HnSRTreeOffsetArrayObj;
	HnSRTreeOffsetArray(const HnSRTreeOffsetArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeOffsetArrayObj *getObject(void) const {
		return (HnSRTreeOffsetArrayObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeOffsetArray null;
	HnSRTreeOffsetArray(void) {}
public:
	/* constructors */
    friend HnSRTreeOffsetArray
	new_HnSRTreeOffsetArray(void);
    friend HnSRTreeOffsetArray
	new_HnSRTreeOffsetArray(const HnSRTreeOffsetArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnSRTreeOffset &ptr);
	void append(const HnSRTreeOffsetArray &ptr);
	void insert(const HnSRTreeOffset &ptr, int index);
	HnSRTreeOffset remove(int index);
	void set(const HnSRTreeOffset &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnSRTreeOffset &get(int i) const;
	HnSRTreeOffset &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnSRTreeOffset &ptr) {
		append(ptr);
	}
	HnSRTreeOffset pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnSRTreeOffsetArray &ptr) const;
	int indexOf(const HnSRTreeOffset &ptr, int fromIndex) const;
	int indexOf(const HnSRTreeOffset &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnSRTreeOffset_hh */
