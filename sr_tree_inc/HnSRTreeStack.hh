/*
 * HnSRTreeStack.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:34
 */

#ifndef _HnSRTreeStack_hh
#define _HnSRTreeStack_hh

#include "HnPointer.hh"

#include "HnSRTreeNode.hh"
#include "HnSRTreeLeaf.hh"

class HnSRTreeStack;
class HnSRTreeStackObj;
class HnSRTreeStackArrayObj;

 HnSRTreeStack
new_HnSRTreeStack(void);

/*
 * HnSRTreeStack
 */

class HnSRTreeStack: public HnPointer {
private:
    friend class HnSRTreeStackObj;
	HnSRTreeStack(const HnSRTreeStackObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeStackObj *getObject(void) const {
		return (HnSRTreeStackObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeStack null;
	HnSRTreeStack(void) {}
public:
    friend HnSRTreeStack
	new_HnSRTreeStack(void);

	void push(const HnSRTreeNode &node, int cursor);
	void push(const HnSRTreeLeaf &leaf, int cursor);
	void push(const HnSRTreeNode &node);
	void push(const HnSRTreeLeaf &leaf);
	void pop(void);
	void advance(void);

	int getDepth(void) const;

	int getCursor(void) const;
	HnBool hasMore(void) const;

	HnBool isTopNode(void) const;
	HnBool isTopLeaf(void) const;

	HnSRTreeNode getTopNode(void) const;
	HnSRTreeLeaf getTopLeaf(void) const;
};

/*
 * HnSRTreeStackArray
 */

class HnSRTreeStackArray: public HnPointer {
private:
    friend class HnSRTreeStackArrayObj;
	HnSRTreeStackArray(const HnSRTreeStackArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeStackArrayObj *getObject(void) const {
		return (HnSRTreeStackArrayObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeStackArray null;
	HnSRTreeStackArray(void) {}
public:
	/* constructors */
    friend HnSRTreeStackArray
	new_HnSRTreeStackArray(void);
    friend HnSRTreeStackArray
	new_HnSRTreeStackArray(const HnSRTreeStackArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnSRTreeStack &ptr);
	void append(const HnSRTreeStackArray &ptr);
	void insert(const HnSRTreeStack &ptr, int index);
	HnSRTreeStack remove(int index);
	void set(const HnSRTreeStack &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnSRTreeStack &get(int i) const;
	HnSRTreeStack &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnSRTreeStack &ptr) {
		append(ptr);
	}
	HnSRTreeStack pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnSRTreeStackArray &ptr) const;
	int indexOf(const HnSRTreeStack &ptr, int fromIndex) const;
	int indexOf(const HnSRTreeStack &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnSRTreeStack_hh */
