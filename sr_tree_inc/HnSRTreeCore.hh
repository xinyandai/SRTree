/*
 * HnSRTreeCore.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:32
 */

#ifndef _HnSRTreeCore_hh
#define _HnSRTreeCore_hh

#include "HnPointer.hh"

#include "HnString.hh"
#include "HnPoint.hh"

class HnSRTreeCore;
class HnSRTreeCoreObj;
class HnSRTreeCoreArray;
class HnSRTreeCoreArrayObj;

HnSRTreeCoreArray
new_HnSRTreeCoreArray(void);
HnSRTreeCoreArray
new_HnSRTreeCoreArray(const HnSRTreeCoreArray &ptr);
HnSRTreeCore
new_HnSRTreeCore(const HnPoint &center, double radius, int weight);

/*
 * HnSRTreeCore
 */

class HnSRTreeCore: public HnPointer {
private:
    friend class HnSRTreeCoreObj;
	HnSRTreeCore(const HnSRTreeCoreObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeCoreObj *getObject(void) const {
		return (HnSRTreeCoreObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeCore null;
	HnSRTreeCore(void) {}
public:
    friend HnSRTreeCore
	new_HnSRTreeCore(const HnPoint &center, double radius, int weight);

	HnBool equals(const HnSRTreeCore &core) const;

	int getDimension(void) const;

	HnPoint getCenter(void) const;
	double getRadius(void) const;
	int getWeight(void) const;

	HnString toString(void) const;
};

/*
 * HnSRTreeCoreArray
 */

class HnSRTreeCoreArray: public HnPointer {
private:
    friend class HnSRTreeCoreArrayObj;
	HnSRTreeCoreArray(const HnSRTreeCoreArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeCoreArrayObj *getObject(void) const {
		return (HnSRTreeCoreArrayObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeCoreArray null;
	HnSRTreeCoreArray(void) {}
public:
	/* constructors */
    friend HnSRTreeCoreArray
	new_HnSRTreeCoreArray(void);
    friend HnSRTreeCoreArray
	new_HnSRTreeCoreArray(const HnSRTreeCoreArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnSRTreeCore &ptr);
	void append(const HnSRTreeCoreArray &ptr);
	void insert(const HnSRTreeCore &ptr, int index);
	HnSRTreeCore remove(int index);
	void set(const HnSRTreeCore &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnSRTreeCore &get(int i) const;
	HnSRTreeCore &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnSRTreeCore &ptr) {
		append(ptr);
	}
	HnSRTreeCore pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnSRTreeCoreArray &ptr) const;
	int indexOf(const HnSRTreeCore &ptr, int fromIndex) const;
	int indexOf(const HnSRTreeCore &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnSRTreeCore_hh */
