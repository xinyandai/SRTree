/*
 * HnSRTreeNeighbor.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:34
 */

#ifndef _HnSRTreeNeighbor_hh
#define _HnSRTreeNeighbor_hh

#include "HnPointer.hh"

#include "HnPoint.hh"
#include "HnData.hh"
#include "HnString.hh"

class HnSRTreeNeighbor;
class HnSRTreeNeighborObj;
class HnSRTreeNeighborArray;
class HnSRTreeNeighborArrayObj;

HnSRTreeNeighborArray
new_HnSRTreeNeighborArray(void);
HnSRTreeNeighborArray
new_HnSRTreeNeighborArray(const HnSRTreeNeighborArray &ptr);
HnSRTreeNeighbor
new_HnSRTreeNeighbor(const HnPoint &point, const HnData &data,
                     double distance);
/*
 * HnSRTreeNeighbor
 */

class HnSRTreeNeighbor: public HnPointer {
private:
    friend class HnSRTreeNeighborObj;
	HnSRTreeNeighbor(const HnSRTreeNeighborObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeNeighborObj *getObject(void) const {
		return (HnSRTreeNeighborObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeNeighbor null;
	HnSRTreeNeighbor(void) {}
public:
    friend HnSRTreeNeighbor
	new_HnSRTreeNeighbor(const HnPoint &point, const HnData &data,
			   double distance);

	HnPoint getPoint(void) const;
	HnData getData(void) const;
	double getDistance(void) const;
	HnString toString(void) const;

	static HnSRTreeNeighborArray sort(const HnSRTreeNeighborArray &ptr);
};

/*
 * HnSRTreeNeighborArray
 */

class HnSRTreeNeighborArray: public HnPointer {
private:
    friend class HnSRTreeNeighborArrayObj;
	HnSRTreeNeighborArray(const HnSRTreeNeighborArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeNeighborArrayObj *getObject(void) const {
		return (HnSRTreeNeighborArrayObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeNeighborArray null;
	HnSRTreeNeighborArray(void) {}
public:
	/* constructors */
    friend HnSRTreeNeighborArray
	new_HnSRTreeNeighborArray(void);
    friend HnSRTreeNeighborArray
	new_HnSRTreeNeighborArray(const HnSRTreeNeighborArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnSRTreeNeighbor &ptr);
	void append(const HnSRTreeNeighborArray &ptr);
	void insert(const HnSRTreeNeighbor &ptr, int index);
	HnSRTreeNeighbor remove(int index);
	void set(const HnSRTreeNeighbor &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnSRTreeNeighbor &get(int i) const;
	HnSRTreeNeighbor &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnSRTreeNeighbor &ptr) {
		append(ptr);
	}
	HnSRTreeNeighbor pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnSRTreeNeighborArray &ptr) const;
	int indexOf(const HnSRTreeNeighbor &ptr, int fromIndex) const;
	int indexOf(const HnSRTreeNeighbor &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnSRTreeNeighbor_hh */
