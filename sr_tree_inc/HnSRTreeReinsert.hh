/*
 * HnSRTreeReinsert.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:33
 */

#ifndef _HnSRTreeReinsert_hh
#define _HnSRTreeReinsert_hh

#include "HnPointer.hh"

#include <unistd.h>
#include "HnPoint.hh"
#include "HnData.hh"

class HnSRTreeReinsert;
class HnSRTreeReinsertObj;
class HnSRTreeReinsertArray;
class HnSRTreeReinsertArrayObj;

 HnSRTreeReinsert
new_HnSRTreeReinsert(const HnPoint &point, const HnData &data);
 HnSRTreeReinsert
new_HnSRTreeReinsert(off_t offset, int level);

/* constructors */
 HnSRTreeReinsertArray
new_HnSRTreeReinsertArray(void);
 HnSRTreeReinsertArray
new_HnSRTreeReinsertArray(const HnSRTreeReinsertArray &ptr);

/*
 * HnSRTreeReinsert
 */

class HnSRTreeReinsert: public HnPointer {
private:
    friend class HnSRTreeReinsertObj;
	HnSRTreeReinsert(const HnSRTreeReinsertObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeReinsertObj *getObject(void) const {
		return (HnSRTreeReinsertObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeReinsert null;
	HnSRTreeReinsert(void) {}
public:
	enum Type { POINT, BLOCK };

    friend HnSRTreeReinsert
	new_HnSRTreeReinsert(const HnPoint &point, const HnData &data);
    friend HnSRTreeReinsert
	new_HnSRTreeReinsert(off_t offset, int level);
	HnSRTreeReinsert::Type getType(void) const;
	HnPoint getPoint(void) const;
	HnData getData(void) const;
	off_t getOffset(void) const;
	int getLevel(void) const;
};

/*
 * HnSRTreeReinsertArray
 */

class HnSRTreeReinsertArray: public HnPointer {
private:
    friend class HnSRTreeReinsertArrayObj;
	HnSRTreeReinsertArray(const HnSRTreeReinsertArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnSRTreeReinsertArrayObj *getObject(void) const {
		return (HnSRTreeReinsertArrayObj *)HnPointer::getObject();
	}
public:
	static const HnSRTreeReinsertArray null;
	HnSRTreeReinsertArray(void) {}
public:
	/* constructors */
    friend HnSRTreeReinsertArray
	new_HnSRTreeReinsertArray(void);
    friend HnSRTreeReinsertArray
	new_HnSRTreeReinsertArray(const HnSRTreeReinsertArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnSRTreeReinsert &ptr);
	void append(const HnSRTreeReinsertArray &ptr);
	void insert(const HnSRTreeReinsert &ptr, int index);
	HnSRTreeReinsert remove(int index);
	void set(const HnSRTreeReinsert &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnSRTreeReinsert &get(int i) const;
	HnSRTreeReinsert &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnSRTreeReinsert &ptr) {
		append(ptr);
	}
	HnSRTreeReinsert pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnSRTreeReinsertArray &ptr) const;
	int indexOf(const HnSRTreeReinsert &ptr, int fromIndex) const;
	int indexOf(const HnSRTreeReinsert &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnSRTreeReinsert_hh */
