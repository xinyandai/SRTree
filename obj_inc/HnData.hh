/*
 * HnData.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:18:59
 */

#ifndef _HnData_hh
#define _HnData_hh

#include "HnPointer.hh"
/*
 * HnData
 */
class HnData;
class HnDataObj;
class HnDataArray;
class HnDataArrayObj;

HnData
new_HnData(void);
HnData
new_HnData(const void *ptr, int n);
HnData
new_HnData(const void *ptr1, int n1, const void *ptr2, int n2);
HnDataArray
new_HnDataArray(void);
HnDataArray
new_HnDataArray(const HnDataArray &ptr);


class HnData: public HnPointer {
private:
    friend class HnDataObj;
	HnData(const HnDataObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnDataObj *getObject(void) const {
		return (HnDataObj *)HnPointer::getObject();
	}
public:
	static const HnData null;
	HnData(void) {}
public:
	/* constructor and destructor */
    friend HnData
	new_HnData(void);
    friend HnData
	new_HnData(const void *ptr, int n);
    friend HnData
	new_HnData(const void *ptr1, int n1, const void *ptr2, int n2);

	/* chars and length */
	const char *chars(void) const;
	const char &get(int i) const;
	int length(void) const;

	/* utilities */
	HnBool equals(const HnData &data) const;
};

/*
 * HnDataArray
 */

class HnDataArray: public HnPointer {
private:
    friend class HnDataArrayObj;
	HnDataArray(const HnDataArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnDataArrayObj *getObject(void) const {
		return (HnDataArrayObj *)HnPointer::getObject();
	}
public:
	static const HnDataArray null;
	HnDataArray(void) {}
public:
	/* constructors */
    friend HnDataArray
	new_HnDataArray(void);
    friend HnDataArray
	new_HnDataArray(const HnDataArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnData &ptr);
	void append(const HnDataArray &ptr);
	void insert(const HnData &ptr, int index);
	HnData remove(int index);
	void set(const HnData &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnData &get(int i) const;
	HnData &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnData &ptr) {
		append(ptr);
	}
	HnData pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnDataArray &ptr) const;
	int indexOf(const HnData &ptr, int fromIndex) const;
	int indexOf(const HnData &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnData_hh */
