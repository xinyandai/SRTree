/*
 * HnData.cc
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:18:59
 */

#include "HnData.hh"
#include "HnDataObj.hh"

/*
 * HnData
 */

const HnData HnData::null;

HnData
new_HnData(void)
{
	HnDataObj *_obj;
	HnData _ptr;

	_obj = new HnDataObj();

	if(_obj->hasFailed())
		return HnData::null;

	_ptr.assign(_obj);
	return _ptr;
}

HnData
new_HnData(const void *ptr, int n)
{
	HnDataObj *_obj;
	HnData _ptr;

	_obj = new HnDataObj(ptr, n);

	if(_obj->hasFailed())
		return HnData::null;

	_ptr.assign(_obj);
	return _ptr;
}

HnData
new_HnData(const void *ptr1, int n1, const void *ptr2, int n2)
{
	HnDataObj *_obj;
	HnData _ptr;

	_obj = new HnDataObj(ptr1, n1, ptr2, n2);

	if(_obj->hasFailed())
		return HnData::null;

	_ptr.assign(_obj);
	return _ptr;
}

const char *
HnData::chars(void) const
{
	return getObject()->chars();
}

const char &
HnData::get(int i) const
{
	return getObject()->get(i);
}

int
HnData::length(void) const
{
	return getObject()->length();
}

HnBool
HnData::equals(const HnData &ptr) const {
	if(isInvalid()) {
		if(ptr.isInvalid())
			return HnTRUE;
		else
			return HnFALSE;
    	}
    	else {
		if(ptr.isInvalid())
			return HnFALSE;
		else
			return getObject()->equals(ptr);
	}
}

/*
 * HnDataArrayObj
 */

#include <stdlib.h>
#include "HnString.hh"
class HnDataArrayObj: public HnObject {
private:
	HnData **array;
	int len;
	int size;

	static const int initialSize;

	void initialize(void) {
		array = NULL;
		len = 0;
		size = 0;
	}
	void dispose(void) {
		if(array != NULL) {
			int i;
			for(i=0; i<len; i++)
				delete array[i];
			free(array);
		}
		array = NULL;
		len = 0;
		size = 0;
	}
	void ensureSize(int requiredSize);

public:
	/* constructor and destructor */
	HnDataArrayObj(void);
	HnDataArrayObj(const HnDataArray &ptr);
	~HnDataArrayObj(void);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnData &ptr);
	void append(const HnDataArray &ptr);
	void insert(const HnData &ptr, int index);
	HnData remove(int index);
	void set(const HnData &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const { return len; }
	HnData &get(int i) const;

	/* utilities */
	HnBool equals(const HnDataArray &ptr) const;
	int indexOf(const HnData &ptr, int fromIndex) const;
	HnString toString(void) const;
};

const int HnDataArrayObj::initialSize = 4;

static void *
xrealloc(void *ptr, size_t size)
{
        if(ptr == NULL) {
                if((ptr = malloc(size)) == NULL)
                        HnSysError("malloc");
        }
        else {
                if((ptr = realloc(ptr, size)) == NULL)
                        HnSysError("realloc");
        }

        return ptr;
}

void
HnDataArrayObj::ensureSize(int requiredSize)
{
	int oldSize, newSize;

	if((oldSize = size) >= requiredSize)
		return;

	if((newSize = oldSize) == 0)
		newSize = initialSize;

	while(newSize < requiredSize)
		newSize *= 2;

	array = (HnData **)xrealloc(array, sizeof(HnData *) * newSize);

	size = newSize;
}

HnDataArrayObj::HnDataArrayObj(void)
{
	initialize();
}

HnDataArrayObj::HnDataArrayObj(const HnDataArray &ptr)
{
	initialize();

	clear();
	append(ptr);
}

HnDataArrayObj::~HnDataArrayObj(void)
{
	dispose();
}

void
HnDataArrayObj::clear(void)
{
	dispose();
}

void
HnDataArrayObj::append(const HnData &ptr)
{
	ensureSize(len + 1);

	array[len] = new HnData(ptr);
	len ++;
}

void
HnDataArrayObj::append(const HnDataArray &ptr)
{
	int i;

	ensureSize(len + ptr.length());

	for(i=0; i<ptr.length(); i++)
		append(ptr[i]);
}

void
HnDataArrayObj::insert(const HnData &ptr, int index)
{
	if(index < 0 || index > len)
		HnAbort("HnDataArrayObj::insert: "
			"index is out of bounds.");

	ensureSize(len + 1);

	memmove(array + index + 1, array + index,
		sizeof(HnData *) * (len - index));

	array[index] = new HnData(ptr);
	len ++;
}

HnData
HnDataArrayObj::remove(int index)
{
	HnData ptr = get(index);

	if(index < 0 || index >= len)
                HnAbort("HnDataArrayObj::remove: "
			"index is out of bounds.");

	delete array[index];

	memmove(array + index, array + index + 1,
		sizeof(HnData *) * (len - index - 1));
	len --;

	return ptr;
}

void
HnDataArrayObj::set(const HnData &ptr, int index)
{
	if(index < 0 || index >= len)
		HnAbort("HnDataArrayObj::set: "
			"index is out of bounds.");

	delete array[index];

	array[index] = new HnData(ptr);
}

void
HnDataArrayObj::swap(int i, int j)
{
	if(i < 0 || i >= len || j < 0 || j >= len)
		HnAbort("HnDataArrayObj::swap: index is out of bounds.");

	HnData *ptr = array[i];
	array[i] = array[j];
	array[j] = ptr;
}

HnData &
HnDataArrayObj::get(int i) const {
	if(i < 0 || i >= len)
		HnAbort("HnDataArrayObj::get: index is out of bounds.");

	return *array[i];
}

HnBool
HnDataArrayObj::equals(const HnDataArray &ptr) const {
	int i;

	if(len != ptr.length())
		return HnFALSE;

	for(i=0; i<len; i++) {
		if(!array[i]->equals(ptr[i]))
			return HnFALSE;
	}

	return HnTRUE;
}

int
HnDataArrayObj::indexOf(const HnData &ptr, int fromIndex) const
{
	int i;

	for(i=fromIndex; i<len; i++) {
		if(array[i]->equals(ptr))
			return i;
	}

	return -1;
}

HnString
HnDataArrayObj::toString(void) const
{
	HnString string;

	string = "[ ";
	for(int i=0; i<len; i++) {
		if(i != 0)
			string += ", ";
		string += array[i]->toString();
	}
	string += " ]";

	return string;
}

/*
 * HnDataArray
 */

const HnDataArray HnDataArray::null;

HnDataArray
new_HnDataArray(void)
{
	HnDataArray ptr;

        ptr.assign(new HnDataArrayObj());
        return ptr;
}

HnDataArray
new_HnDataArray(const HnDataArray &value)
{
	HnDataArray ptr;

        if(value.isInvalid())
                ptr.assign(NULL);
        else
                ptr.assign(new HnDataArrayObj(value));

        return ptr;
}

void
HnDataArray::clear(void)
{
	getObject()->clear();
}

void
HnDataArray::append(const HnData &ptr)
{
	getObject()->append(ptr);
}

void
HnDataArray::append(const HnDataArray &ptr)
{
	getObject()->append(ptr);
}

void
HnDataArray::insert(const HnData &ptr, int index)
{
	getObject()->insert(ptr, index);
}

HnData
HnDataArray::remove(int index)
{
	return getObject()->remove(index);
}

void
HnDataArray::set(const HnData &ptr, int index)
{
	getObject()->set(ptr, index);
}

void
HnDataArray::swap(int i, int j)
{
	getObject()->swap(i, j);
}

int
HnDataArray::length(void) const
{
	return getObject()->length();
}

HnData &
HnDataArray::get(int i) const
{
	return getObject()->get(i);
}

HnBool
HnDataArray::equals(const HnDataArray &ptr) const
{
	return getObject()->equals(ptr);
}

int
HnDataArray::indexOf(const HnData &ptr, int fromIndex) const
{
	return getObject()->indexOf(ptr, fromIndex);
}

HnString
HnDataArray::toString(void) const
{
	return getObject()->toString();
}

