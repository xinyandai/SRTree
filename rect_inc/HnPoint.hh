/*
 * HnPoint.hh
 *
 * DO NOT EDIT THIS FILE!
 *
 * This file is automatically generated by obj2ptr.
 * 1997/06/02 21:19:16
 */

#ifndef _HnPoint_hh
#define _HnPoint_hh

#include "HnPointer.hh"

class HnPoint;
class HnPointObj;
class HnPointArray;
class HnPointArrayObj;

HnPoint
new_HnPoint(int dimension);
HnPoint
new_HnPoint(const HnPoint &point);

HnPointArray
new_HnPointArray(void);
HnPointArray
new_HnPointArray(const HnPointArray &ptr);

/*
 * HnPoint
 */

class HnPoint: public HnPointer {
private:
    friend class HnPointObj;
	HnPoint(const HnPointObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnPointObj *getObject(void) const {
		return (HnPointObj *)HnPointer::getObject();
	}
public:
	static const HnPoint null;
	HnPoint(void) {}
public:
    friend HnPoint
	new_HnPoint(int dimension);
    friend HnPoint
	new_HnPoint(const HnPoint &point);

	/* attributes */
	int getDimension(void) const;
	double getCoord(int index) const;
	void setCoord(double coord, int index);

	/* utilities */
	HnBool equals(const HnPoint &point) const;
	HnString toString(void) const;

	double getDistance(const HnPoint &point) const;
};

/*
 * HnPointArray
 */

class HnPointArray: public HnPointer {
private:
    friend class HnPointArrayObj;
	HnPointArray(const HnPointArrayObj *ptr) {
		HnPointer::assign((HnObject *)ptr);
	}
	HnPointArrayObj *getObject(void) const {
		return (HnPointArrayObj *)HnPointer::getObject();
	}
public:
	static const HnPointArray null;
	HnPointArray(void) {}
public:
	/* constructors */
    friend HnPointArray
	new_HnPointArray(void);
    friend HnPointArray
	new_HnPointArray(const HnPointArray &ptr);

	/* clear, append, insert, and remove */
	void clear(void);
	void append(const HnPoint &ptr);
	void append(const HnPointArray &ptr);
	void insert(const HnPoint &ptr, int index);
	HnPoint remove(int index);
	void set(const HnPoint &ptr, int index);
	void swap(int i, int j);

	/* length and get */
	int length(void) const;
	HnPoint &get(int i) const;
	HnPoint &operator[](int i) const { return get(i); }

	/* utilities */
	void push(const HnPoint &ptr) {
		append(ptr);
	}
	HnPoint pop(void) {
		return remove(length() - 1);
	}
	HnBool equals(const HnPointArray &ptr) const;
	int indexOf(const HnPoint &ptr, int fromIndex) const;
	int indexOf(const HnPoint &ptr) const  {
	    return indexOf(ptr, 0);
	}
	HnString toString(void) const;
};

#endif /* _HnPoint_hh */
